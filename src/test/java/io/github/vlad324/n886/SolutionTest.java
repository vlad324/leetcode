package io.github.vlad324.n886;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.params.provider.Arguments.arguments;

import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import java.util.stream.Stream;

class SolutionTest {

    private final Solution solution = new Solution();

    private static Stream<Arguments> testDataProvider() {
        return Stream.of(
            arguments(4, new int[][]{{1, 2}, {1, 3}, {2, 4}}, true),
            arguments(3, new int[][]{{1, 2}, {1, 3}, {2, 3}}, false),
            arguments(3, new int[][]{{1, 2}, {2, 3}}, true),
            arguments(5, new int[][]{{1, 2}, {2, 3}, {3, 4}, {4, 5}, {1, 5}}, false),
            arguments(5, new int[][]{{2, 3}, {4, 5}, {3, 4}}, true),
            arguments(50, new int[][]{{9, 26}, {1, 34}, {14, 17}, {29, 31}, {10, 17}, {25, 31}, {22, 44}, {36, 44},
                {26, 28}, {17, 20}, {16, 28}, {18, 19}, {11, 47}, {34, 46}, {17, 46}, {15, 47}, {19, 29}, {44, 45},
                {14, 18}, {1, 6}, {28, 35}, {16, 22}, {10, 41}, {13, 20}, {2, 27}, {18, 20}, {8, 15}, {37, 41},
                {2, 6}, {24, 39}, {13, 35}, {10, 13}, {18, 46}, {8, 21}, {1, 17}, {2, 32}, {14, 15}, {5, 21},
                {27, 40}, {8, 38}, {5, 34}, {29, 37}, {20, 36}, {9, 39}, {31, 38}, {8, 12}, {7, 44}, {14, 36},
                {4, 15}, {17, 39}, {2, 11}, {25, 44}, {15, 33}, {20, 42}, {25, 33}, {19, 23}, {48, 50}, {28, 37},
                {1, 21}, {23, 37}, {40, 45}, {10, 42}, {2, 34}, {13, 26}, {11, 35}, {1, 15}, {42, 47}, {24, 46},
                {4, 12}, {8, 28}, {15, 26}, {14, 22}, {21, 46}, {4, 42}, {8, 45}, {12, 50}, {16, 29}, {2, 23},
                {16, 32}, {11, 46}, {5, 17}, {15, 46}, {20, 49}, {43, 45}, {17, 50}, {7, 20}, {2, 25}, {21, 33},
                {8, 42}, {16, 23}, {29, 33}, {11, 26}, {29, 39}, {32, 39}, {13, 19}, {27, 31}, {8, 48}, {12, 35},
                {3, 5}, {16, 48}, {4, 6}, {19, 38}, {8, 22}, {14, 25}, {5, 7}, {10, 25}, {26, 30}, {23, 33},
                {22, 43}, {1, 30}, {7, 31}, {16, 42}, {5, 9}, {1, 48}, {4, 27}, {44, 48}, {15, 19}, {21, 39},
                {49, 50}, {30, 33}, {12, 20}, {7, 19}, {31, 36}, {36, 47}, {34, 43}, {42, 44}, {24, 47}, {31, 49},
                {38, 43}, {8, 29}, {15, 39}, {4, 18}, {19, 32}, {14, 23}, {20, 27}, {30, 47}, {4, 38}, {28, 43},
                {1, 23}, {23, 43}, {6, 33}, {4, 49}, {11, 33}, {2, 3}, {18, 43}, {14, 29}, {12, 46}, {3, 47},
                {6, 8}, {15, 43}, {27, 47}, {22, 47}, {12, 19}, {28, 40}, {35, 38}, {1, 7}, {8, 49}, {7, 43}, {14, 41},
                {30, 50}, {17, 47}, {20, 28}, {13, 33}, {19, 41}, {18, 44}, {8, 23}, {13, 46}, {20, 34}, {29, 35}, {15, 31},
                {20, 29}, {2, 45}, {7, 16}, {23, 35}, {30, 37}, {12, 16}, {5, 42}, {16, 24}, {3, 14}, {17, 37}, {6, 50},
                {25, 50}, {15, 35}, {5, 12}, {12, 44}, {10, 12}, {5, 25}, {19, 25}, {24, 31}, {39, 41}, {31, 42}, {1, 13},
                {9, 10}, {8, 30}, {24, 35}, {3, 31}, {3, 19}, {20, 32}, {27, 35}, {6, 19}, {1, 22}, {32, 47}, {5, 38},
                {10, 45}, {3, 8}, {42, 46}, {35, 48}, {26, 48}}, true),
            arguments(10, new int[][]{{4, 7}, {4, 8}, {5, 6}, {1, 6}, {3, 7}, {2, 5}, {5, 8}, {1, 2}, {4, 9},
                {6, 10}, {8, 10}, {3, 6}, {2, 10}, {9, 10}, {3, 9}, {2, 3}, {1, 9}, {4, 6}, {5, 7},
                {3, 8}, {1, 8}, {1, 7}, {2, 4}}, true)
        );
    }

    @ParameterizedTest
    @MethodSource("testDataProvider")
    void should_produce_expected_result(int n, int[][] dislikes, boolean expected) {
        // when
        final var actual = solution.possibleBipartition(n, dislikes);

        // then
        assertThat(actual).isEqualTo(expected);
    }
}